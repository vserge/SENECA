Modelica® - A Unified Object-Oriented Language for Systems Modeling
Modelica® - Универсальный Объектно-ориентированный язык для системного моделирования

Language Specification Version 3.3 Revision 1
Спецификация языка Версия 3.3 Редакция 1

July 11, 2014
Июль 11, 2014

Резюме

Этот документ определяет язык Modelica (Modelica является зарегистрированной торговой маркой Ассоции Modelica), версию 3.3, которая развита Ассоциацией Modelica, некоммерческой организацией со штаб-квартирой в Linköping, Швеция. Modelica - свободно доступный, объектно-ориентированный язык для моделирования больших, сложных и разнородных систем. Он подходит для много предметного моделирования, например, мехатронных моделей в робототехнике, автомобильные и космические заявления, включающие механический, электрический, гидравлический контроль и подсистемы государственной машины, процесс ориентировал заявления и поколение и распределение электроэнергии. Модели в Modelica математически описаны дифиренциальными, алгебраическими и дискретными уравнениями. Ничего не требуется для решения задач в ручную. У инструмента Modelica будет достаточно информации, чтобы решить это автоматически. Язык Modelica разработан таким образом, что доступные, специализированные алгоритмы могли быть использованы, чтобы позволить эффективную обработку больших моделей, имеющих больше чем сто тысяч уравнений. Modelica подходит и используется для программно-аппаратного моделирования и для вложенных систем управления. Больше информации доступно в http://www.Modelica.org/
Версия 3.3 Редакция 1 уточняет и исправляет некоторые неточности по тексту спецификации. В основном включает все обновления, сделанные в Версии 3.2 Редакция 2.

ГЛАВА 1

ВВЕДЕНИЕ

1.1 Обзор Modelica
Modelica - язык для моделирования физических систем, разработанных, чтобы поддержать эффективное развитие библиотеки и образцовый обмен. Это - современный язык, основывался на некаузальном моделировании с математическими уравнениями и объектно-ориентированными конструкциями, чтобы облегчить повторное использование моделирования знания.

1.2 Объем спецификации (*уточнить*)
Семантика языка Modelica определена посредством ряда правил для перевода любого класса, описанного на языке Modelica к плоской структуре Modelica. У класса должны быть дополнительные свойства, чтобы его плоская структура Modelica могла быть далее преобразована в ряд отличительных, алгебраических и дискретных уравнений (= плоский гибридный DAE). Такие классы называют моделями моделирования.
Плоская структура Modelica также определена для других случаев, чем модели моделирования; включая функции (может использоваться, чтобы обеспечить алгоритмическое содержание), пакеты (используемый в качестве механизма структурирования), и частичные модели (используемый в качестве основных моделей). Это позволяет правильности быть проверенной прежде, чем построить модель моделирования.
Modelica был разработан, чтобы облегчить символические преобразования моделей, особенно нанеся на карту в основном каждую языковую конструкцию Modelica к непрерывным или мгновенным уравнениям в плоской структуре Modelica. Много моделей Modelica, особенно в связанной Стандартной Библиотеке Modelica, являются более высокими системами индекса и могут только быть обоснованно моделированы, если символическое сокращение индекса выполнено, т.е., уравнения дифференцированы, и соответствующие переменные отобраны как государства, так, чтобы получающаяся система уравнений могла быть преобразована к форме пространства состояний (по крайней мере, в местном масштабе численно), т.е., гибридный DAE ноля индекса. Спецификация Modelica не определяет, как моделировать модель. Однако это определяет ряд уравнений, которые результат моделирования должен удовлетворить, а также возможный.
Ключевые вопросы перевода (или сглаживающийся):
• Расширение унаследованных базовых классов
• Параметризация базовых классов, местных классов и компонентов
• Поколение уравнений связи от соединять-уравнений
Плоская гибридная форма DAE состоит из:
• Декларации переменных с соответствующими основными типами, префиксами и признаками, такими как "параметр Реальный v=5".
• Уравнения от секций уравнения.
• Просьбы функции, где просьбу рассматривают как ряд уравнений, который включает весь вход и все
переменные результата (число уравнений = число основных переменных результата).
• Секции алгоритма, где каждую секцию рассматривают как ряд уравнений, который вовлекает переменные, происходящие в секцию алгоритма (число уравнений = число различных назначенных переменных).
￼• Когда-пункты, где каждый когда-пункт рассматривают как ряд условно оцененных уравнений, также названных мгновенными уравнениями, которые являются функциями переменных, происходящих в пункте (число уравнений = число различных назначенных переменных).
Поэтому, плоский гибридный DAE замечен как ряд уравнений, где некоторые уравнения только условно оценены (например, мгновенные уравнения только оценены, когда соответствующее когда-условие становится верным). Начальная установка модели определена, используя ценности начала и мгновенные уравнения, которые держатся в начальное время только.
Класс Modelica может также содержать аннотации, т.е. формальные комментарии, которые определяют графические представления класса (изображение и диаграмма), текст документации для класса и информация о версии.

ГЛАВА 13

Пакеты

13.1 Пакеты как Специализированный класс
Концептуально пакет это специализированный класс (Секция 4.6), который определяется с помощью специального слова package.

13.2 Мотивация и использование пакетов
[Пакеты в Modelica могут содержать определения констант и классов включая все виды специализированных классов, функций и подпакетов. Термином подпакет мы подразумеваем, что пакет объявлен в другом пакете, никакие отношения наследования не подразумеваются. Параметры и переменные не могут быть объявлены в пакете. Определения в пакете должны, как правило, связываться в некотором роде, который является главной причиной, они размещены в особый пакет. Пакеты полезны по ряду причин:
  • Определения, которые связаны с некоторой особой темой, как правило, группируются в пакет. Это позволяет легче искать определения и код становится более наглядным.
  • Пакеты обеспечивают инкапсуляцию и крупнозернистое (*уточнить*) структурирование, которое уменьшает сложность больших систем. Важный пример - использование пакетов для строительства (иерархических) библиотек классов.
  • Конфликты между определениями имен в различных пакетах не возникают, так как имя пакета неявно предваряет каждое названия определений, объявленных в пакете.
  • Информационное сокрытие (*уточнить*) и инкапсуляция могут быть поддержаны в некоторой степени, обявлениями защищенных классов, типов и других определений, которые будут доступны только в пакете и недоступны внешнему коду.
  • Modelica определяет метод расположения пакета, обеспечивая стандартное отображение имени пакета на расположение файла пакета, как правило местоположением файла или папки на файловой системе является путь.
]

13.2.1 Импорт определений из Пакета
Раздел импорта определеяет публичные классы и другие публичные определения в некотором пакете, доступном для использования более коротких имён в классе или пакете (*уточнить все предложение*). Это - единственный способ получить доуступ к определениям, объявленным в некотором другом пакете для использования в инкапсулированном пакете или классе.
[Раздел импорта в пакете или классе удовлетворяет следующие две потребности:
  • Позволяет определениям других пакетов, стать доступными для использования (в виде коротких имен) в пакете или классе.
  • Явная декларация зависимостей использования от других пакетов.
]
Раздел импорта может быть оформлен одной из следующих пяти синтаксических конструкций:
  import packagename;										(ограниченный (*правомочный*) импорт)
  import [packagename.]definitionname;						(импорт одного определения)
  import [packagename.]{def1,def2,...defN};					(многократный импорт)
  import packagename.*;										(неограниченный (*безусловный*) импорт)
  import shortpackagename = packagename;					(импорт с переименованием)
  import shortpackagename = [packagename.]definitionname;	(импорт с переименование одного определения)
В настоящем документе ИмяПакета - полностью составное имя импортируемого пакета включая возможное точечное примечание (dot notation), и определение имени - название элемента в пакете. Многократный импорт определения эквивалентен многократному единственному импорту определения с соответствующим ИменемПакета и названиями определений. (*уточнить предложение*)

13.2.1.1 Поиск импортированных имен
Эта секция только определяет, как осуществляется поиск импортируемого имени в разделе импорта. Для поиска в целом – включая то, как используется раздел импорта, см. Раздел 5.3.
Поиск названия импортированного пакета или класса, например, A.B.C в пунктах импортирует import A.B.C; import D=A.B.C; import A.B.C.*, отклоняется от нормального лексического поиска, начиная лексический поиск первой части имени с верхнего уровня.
Разделы ограниченного импорта могут только относиться к пакетам или элементам пакетов, т.е., в выражении import A.B.C; или import D=A.B.C;, A.B должено быть пакетом. Разделы неограниченного импорта могут только импортировать из пакетов, т.е., в выражении import A.B.*;, A.B должно быть пакетом. [Примечание: import A; класс A может быть любым классом, который является элементом неназванного пакета верхнего уровня]
[Например, если пакет ComplexNumbers был бы объявлен как подпакет в пакете Modelica.Math, его полным составным именем было бы Modelica.Math.ComplexNumbers. Имя определяется как простое имя без точечной нотации единственного определения, которое импортируется. Короткое имя пакета - простое имя без точечной нотации, которое может использоваться, чтобы обращаться к пакету после импорта вместо полного намного большего имени пакета.
Формы определения раздела import иллюстрируются ниже исходя из предположения, что мы хотим получить доступ к дополнительной операции гипотетического пакета Modelica.Math.ComplexNumbers:
  import Modelica.Math.ComplexNumbers;						// Доступ обеспечивается по имени ComplexNumbers.Add
  import Modelica.Math.ComplexNumbers.Add;					// Доступ обеспечивается по имени Add
  import Modelica.Math.ComplexNumbers.{Add,Sub};			// Доступ обеспечивается по имени Add и Sub
  import Modelica.Math.ComplexNumbers.*;					// Доступ обеспечивается по имени Add
  import Co = Modelica.Math.ComplexNumbers;					// Доступ обеспечивается по имени Co.Add
]

13.2.1.2 Сводная информация о Правилах для разделов Импорта
Следующие правила относятся к разделам импорта:
  • Разделы импорта не наследуются.
  • Разделы импорта не являются именованными элементами класса или пакета. Это означает, что разделы импорта не могут быть
измененны модификаторами или при повторном обявлении существующего определения (redeclarations).
  • Последовательность разделов импорта не имеет значения.
  • Можно импортировать только из пакетов, а не из других видов классов. Оба вида и пакеты, и классы могут быть
импортированны в класс т.е.(*уточнить*), они могут содержать разделы импорта.
  • Импортированный пакет или определение должны всегда упоминаться с помощью его полного составного имени в разделе импорта.
  • Разделам многократного органиченного импорта не разрешено соедержать теже самые имена, что и сами импортируемые имена.
  